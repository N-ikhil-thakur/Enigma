from rotate import interchange_keys_values, rotate_dict_keys, rotate_dict_values


class EnigmaEncryptor():

    chars = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
             'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
             '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
             '~', '`', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '{', '}', '[', ']', '-', '+', '=', '_', "'", '"', ':', ';', '.', '/', ' ', '>', '<', '?', ',', '\\']

    rotors = {
        'r0': {'A': '0', 'B': 'g', 'C': 'x', 'D': 'V', 'E': '9', 'F': 'A', 'G': 'l', 'H': '?', 'I': 'Y', 'J': '^', 'K': '~', 'L': '1', 'M': 'I', 'N': 'c', 'O': ':', 'P': 'q', 'Q': 'K', 'R': 'X', 'S': 'U', 'T': 'N', 'U': '2', 'V': 'H', 'W': 'Q', 'X': '[', 'Y': 'e', 'Z': '*', 'a': ')', 'b': '!', 'c': '\\', 'd': '+', 'e': '(', 'f': '%', 'g': ';', 'h': ']', 'i': 'm', 'j': '_', 'k': 'i', 'l': '6', 'm': 'w', 'n': 'n', 'o': 's', 'p': 'r', 'q': '=', 'r': 'G', 's': 'z', 't': '.', 'u': '`', 'v': '$', 'w': 'j', 'x': 'd', 'y': '-', 'z': '8', '0': 'J', '1': 'M', '2': 'T', '3': 'a', '4': '4', '5': 'v', '6': ' ', '7': 'f', '8': '{', '9': 'S', '~': '<', '`': '>', '!': 'W', '@': 'o', '#': '&', '$': 'C', '%': "'", '^': '@', '&': 'h', '*': 't', '(': '5', ')': '/', '{': 'L', '}': 'Z', '[': 'u', ']': '"', '-': 'D', '+': 'k', '=': '}', '_': 'p', "'": 'E', '"': 'P', ':': 'F', ';': 'R', '.': 'B', '/': '3', ' ': 'y', '>': 'O', '<': ',', '?': '#', ',': 'b', '\\': '7'},

        'r1': {'A': 'Z', 'B': "'", 'C': 'b', 'D': 'B', 'E': '=', 'F': 's', 'G': '{', 'H': ',', 'I': 'O', 'J': 'X', 'K': 'V', 'L': 'e', 'M': '2', 'N': '\\', 'O': '[', 'P': 'R', 'Q': '8', 'R': 'i', 'S': '<', 'T': ')', 'U': 'W', 'V': 'A', 'W': 'm', 'X': 't', 'Y': ':', 'Z': '!', 'a': '.', 'b': 'x', 'c': 'F', 'd': 'd', 'e': '7', 'f': '-', 'g': 'u', 'h': 'l', 'i': '~', 'j': 'v', 'k': 'a', 'l': '(', 'm': 'G', 'n': 'k', 'o': 'S', 'p': '4', 'q': ';', 'r': 'D', 's': '>', 't': 'g', 'u': '*', 'v': 'T', 'w': 'y', 'x': '&', 'y': 'E', 'z': ']', '0': '^', '1': 'n', '2': 'p', '3': 'P', '4': '0', '5': '%', '6': '`', '7': 'f', '8': 'N', '9': 'Q', '~': '?', '`': 'H', '!': 'I', '@': '3', '#': 'h', '$': 'U', '%': '+', '^': 'z', '&': '9', '*': 'Y', '(': 'r', ')': 'M', '{': '"', '}': '/', '[': '5', ']': 'c', '-': '#', '+': '6', '=': 'j', '_': '@', "'": 'K', '"': 'J', ':': ' ', ';': '1', '.': 'L', '/': 'q', ' ': 'C', '>': '}', '<': 'o', '?': 'w', ',': '$', '\\': '_'},

        'r2': {'A': '<', 'B': 'M', 'C': '}', 'D': 'Z', 'E': '-', 'F': 'L', 'G': 'w', 'H': 'U', 'I': 'Y', 'J': 'l', 'K': 'j', 'L': '2', 'M': 'm', 'N': 'h', 'O': ' ', 'P': '$', 'Q': '&', 'R': "'", 'S': '(', 'T': 'e', 'U': '5', 'V': '+', 'W': 'K', 'X': '^', 'Y': 'o', 'Z': '!', 'a': '{', 'b': '.', 'c': ',', 'd': '=', 'e': ')', 'f': 'C', 'g': 'E', 'h': '1', 'i': '#', 'j': 'p', 'k': 'n', 'l': '[', 'm': '_', 'n': 'b', 'o': '3', 'p': ';', 'q': 's', 'r': 'I', 's': 'x', 't': '7', 'u': 'B', 'v': 't', 'w': '4', 'x': 'P', 'y': 'W', 'z': '~', '0': 'F', '1': 'V', '2': 'v', '3': 'N', '4': 'd', '5': 'Q', '6': 'D', '7': 'i', '8': 'X', '9': '9', '~': '/', '`': 'g', '!': 'O', '@': '>', '#': '8', '$': '6', '%': 'q', '^': '?', '&': 'u', '*': '`', '(': 'f', ')': 'T', '{': 'A', '}': 'S', '[': 'H', ']': '@', '-': 'r', '+': 'z', '=': ']', '_': 'a', "'": 'G', '"': '%', ':': 'J', ';': '0', '.': '"', '/': 'k', ' ': '*', '>': '\\', '<': 'y', '?': ':', ',': 'c', '\\': 'R'},

        'r3': {'A': 'N', 'B': '$', 'C': 'j', 'D': 'J', 'E': '?', 'F': 'p', 'G': 'H', 'H': 'R', 'I': 'B', 'J': '8', 'K': ':', 'L': 'W', 'M': 'h', 'N': 'F', 'O': 'o', 'P': 'r', 'Q': '0', 'R': ';', 'S': '7', 'T': '3', 'U': '^', 'V': 'D', 'W': '-', 'X': 's', 'Y': ',', 'Z': 'f', 'a': 'V', 'b': 'u', 'c': '_', 'd': 'e', 'e': 'G', 'f': 'n', 'g': 'v', 'h': 'L', 'i': 'C', 'j': 'w', 'k': 'I', 'l': '@', 'm': 'Y', 'n': "'", 'o': 'l', 'p': 'd', 'q': '+', 'r': '>', 's': 'z', 't': '"', 'u': 'O', 'v': '#', 'w': '!', 'x': ' ', 'y': 'E', 'z': 'a', '0': 'y', '1': '6', '2': 'P', '3': '1', '4': 'A', '5': 'i', '6': 'g', '7': 'S', '8': '{', '9': '=', '~': '~', '`': 'X', '!': 'm', '@': '}', '#': '[', '$': 'Z', '%': 'c', '^': 'Q', '&': '2', '*': 'k', '(': 'T', ')': 'x', '{': '(', '}': ']', '[': 't', ']': '&', '-': 'q', '+': '/', '=': '%', '_': ')', "'": '4', '"': '5', ':': 'U', ';': '.', '.': '`', '/': 'M', ' ': 'b', '>': '<', '<': 'K', '?': '\\', ',': '9', '\\': '*'},

        'r4': {'A': 'E', 'B': 'h', 'C': 'p', 'D': 'G', 'E': 'z', 'F': "'", 'G': '?', 'H': '<', 'I': 'u', 'J': 'S', 'K': '$', 'L': 'c', 'M': '3', 'N': 'q', 'O': '*', 'P': '_', 'Q': '\\', 'R': '[', 'S': 'W', 'T': 'v', 'U': 'j', 'V': 'K', 'W': ':', 'X': 'k', 'Y': '#', 'Z': '^', 'a': 'o', 'b': ';', 'c': '4', 'd': '{', 'e': 'y', 'f': 'Q', 'g': '}', 'h': 'i', 'i': 'f', 'j': '!', 'k': 'D', 'l': 'e', 'm': '1', 'n': 'g', 'o': 'n', 'p': 'w', 'q': 'C', 'r': 'l', 's': '"', 't': '=', 'u': 'b', 'v': 'P', 'w': '+', 'x': 's', 'y': 'X', 'z': 't', '0': ')', '1': ']', '2': 'Z', '3': '%', '4': 'm', '5': 'R', '6': '(', '7': 'T', '8': '.', '9': '0', '~': '&', '`': 'J', '!': '@', '@': 'H', '#': ',', '$': '~', '%': '/', '^': 'r', '&': 'd', '*': '2', '(': '`', ')': '6', '{': 'a', '}': '7', '[': '9', ']': ' ', '-': 'x', '+': 'L', '=': 'F', '_': 'U', "'": 'A', '"': 'V', ':': 'M', ';': '5', '.': 'N', '/': 'Y', ' ': 'I', '>': '-', '<': 'O', '?': 'B', ',': '>', '\\': '8'}
    }

    plug_board = {'A': 'A', 'B': 'B', 'C': 'C', 'D': 'D', 'E': 'E', 'F': 'F', 'G': 'G', 'H': 'H', 'I': 'I', 'J': 'J', 'K': 'K', 'L': 'L', 'M': 'M', 'N': 'N', 'O': 'O', 'P': 'P', 'Q': 'Q', 'R': 'R', 'S': 'S', 'T': 'T', 'U': 'U', 'V': 'V', 'W': 'W', 'X': 'X', 'Y': 'Y', 'Z': 'Z', 'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f', 'g': 'g', 'h': 'h', 'i': 'i', 'j': 'j', 'k': 'k', 'l': 'l', 'm': 'm', 'n': 'n', 'o': 'o', 'p': 'p', 'q': 'q', 'r': 'r', 's': 's', 't': 't',
                  'u': 'u', 'v': 'v', 'w': 'w', 'x': 'x', 'y': 'y', 'z': 'z', '0': '0', '1': '1', '2': '2', '3': '3', '4': '4', '5': '5', '6': '6', '7': '7', '8': '8', '9': '9', '~': '~', '`': '`', '!': '!', '@': '@', '#': '#', '$': '$', '%': '%', '^': '^', '&': '&', '*': '*', '(': '(', ')': ')', '{': '{', '}': '}', '[': '[', ']': ']', '-': '-', '+': '+', '=': '=', '_': '_', "'": "'", '"': '"', ':': ':', ';': ';', '.': '.', '/': '/', ' ': ' ', '>': '>', '<': '<', '?': '?', ',': ',', '\\': '\\'}

    o_plug_board = interchange_keys_values(plug_board)

    reflector = {'*': '*', '!': '^', '^': '!', '#': '$', '$': '#', 'A': '@', '@': 'A', 'D': 'D', 'H': 'H', 'L': 'L', 'N': 'N', 'T': 'T', 'W': 'W', 'Z': 'Z', 'a': 'a', 'c': 'c', 'f': 'f', 'h': 'h', 'm': 'm', 'o': 'o', 'q': 'q', 'w': 'w', 'x': 'x', '\\': '\\', '&': '&', ')': ')', '-': '-', '=': '=', ';': ';', '>': '>', '2': '2', '8': '8',
                 'B': '?', '?': 'B', 'C': 'E', 'E': 'C', 'F': '0', '0': 'F', 'G': 'i', 'i': 'G', 'I': 'j', 'j': 'I', 'J': 'K', 'K': 'J', 'M': '%', '%': 'M', 'O': '~', '~': 'O', 'P': 'p', 'p': 'P', 'Q': '5', '5': 'Q', 'R': '`', '`': 'R', 'S': 's', 's': 'S', 'U': '9', '9': 'U', 'V': '1', '1': 'V', 'X': ':', 'g': 'g',
                 ':': 'X', 'Y': 'y', 'y': 'Y', 'b': 'd', 'd': 'b', 'e': 'k', 'k': 'e', 'l': '(', '(': 'l', 'n': '{', '{': 'n', 'r': '+', '+': 'r', 't': 'u', 'u': 't', 'v': '_', '_': 'v', 'z': '/', '/': 'z', '}': '.', '.': '}', '[': "'", "'": '[', ']': ' ', ' ': ']', '"': '<', '<': '"', ',': '3', '3': ',', '4': '7', '7': '4', '6': '6',
                 }

    def __init__(self, pb,  r1, r2, r3, r1_k, r1_v, r2_k, r2_v, r3_k, r3_v):
        new_pb = pb.copy()
        for key in pb:
            if(not any(key in alphas for alphas in self.chars)):
                del new_pb[key]
            else:
                if(not any(pb[key] in alphas for alphas in self.chars)):
                    del new_pb[key]

        self.plug_board.update(new_pb)
        self.plug_board.update(interchange_keys_values(new_pb))
        self.o_plug_board = interchange_keys_values(self.plug_board)
        self.rotor1 = rotate_dict_keys(rotate_dict_values(
            self.rotors[f'r{abs(r1)%5}'], r1_v), r1_k)
        self.rotor2 = rotate_dict_keys(rotate_dict_values(
            self.rotors[f'r{abs(r2)%5}'], r2_v), r2_k)
        self.rotor3 = rotate_dict_keys(rotate_dict_values(
            self.rotors[f'r{abs(r3)%5}'], r3_v), r3_k)
        self.o_rotor1 = interchange_keys_values(self.rotor1)
        self.o_rotor2 = interchange_keys_values(self.rotor2)
        self.o_rotor3 = interchange_keys_values(self.rotor3)

    def encrypt(self, input_text):
        r1 = 0
        r2 = 0
        rotor1 = self.rotor1.copy()
        rotor2 = self.rotor2.copy()
        rotor3 = self.rotor3.copy()
        o_rotor1 = self.o_rotor1.copy()
        o_rotor2 = self.o_rotor2.copy()
        o_rotor3 = self.o_rotor3.copy()

        reflector = self.reflector.copy()
        input_text_chars = list(input_text)
        cypher_text_chars = input_text_chars.copy()
        for x in range(0, len(input_text_chars)):
            if(any(input_text_chars[x] in alphas for alphas in self.chars)):
                cypher_text_chars[x] = self.o_plug_board[o_rotor1[o_rotor2[o_rotor3[
                    reflector[rotor3[rotor2[rotor1[self.plug_board[f'{input_text_chars[x]}']]]]]]]]]

                if(r1 < len(self.rotor1)):
                    r1 += 1
                    rotor1 = rotate_dict_values(rotor1, 1)
                    o_rotor1 = rotate_dict_keys(o_rotor1, 1)
                else:
                    r1 = 0
                    if(r2 < len(self.rotor2)):
                        r2 += 1
                        rotor2 = rotate_dict_values(rotor2, 1)
                        o_rotor2 = rotate_dict_keys(o_rotor2, 1)
                    else:
                        r2 = 0
                        rotor3 = rotate_dict_values(rotor3, 1)
                        o_rotor3 = rotate_dict_keys(rotor3, 1)
            else:
                pass
        return "".join(cypher_text_chars)
